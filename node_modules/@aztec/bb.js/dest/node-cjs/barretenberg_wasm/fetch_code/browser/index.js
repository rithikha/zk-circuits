"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCode = void 0;
const tslib_1 = require("tslib");
const pako_1 = tslib_1.__importDefault(require("pako"));
// Annoyingly the wasm declares if it's memory is shared or not. So now we need two wasms if we want to be
// able to fallback on "non shared memory" situations.
async function fetchCode(multithreaded, wasmPath) {
    let url;
    if (wasmPath) {
        const suffix = multithreaded ? '-threads' : '';
        url = `${wasmPath}/barretenberg${suffix}.wasm.gz`;
    }
    else {
        url = multithreaded
            ? (await Promise.resolve().then(() => tslib_1.__importStar(require(/* webpackIgnore: true */ './barretenberg-threads.js')))).default
            : (await Promise.resolve().then(() => tslib_1.__importStar(require(/* webpackIgnore: true */ './barretenberg.js')))).default;
    }
    const res = await fetch(url);
    const maybeCompressedData = await res.arrayBuffer();
    const buffer = new Uint8Array(maybeCompressedData);
    const isGzip = 
    // Check magic number
    buffer[0] === 0x1f &&
        buffer[1] === 0x8b &&
        // Check compression method:
        buffer[2] === 0x08;
    if (isGzip) {
        const decompressedData = pako_1.default.ungzip(buffer);
        return decompressedData.buffer;
    }
    else {
        return buffer;
    }
}
exports.fetchCode = fetchCode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnX3dhc20vZmV0Y2hfY29kZS9icm93c2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSx3REFBd0I7QUFFeEIsMEdBQTBHO0FBQzFHLHNEQUFzRDtBQUMvQyxLQUFLLFVBQVUsU0FBUyxDQUFDLGFBQXNCLEVBQUUsUUFBaUI7SUFDdkUsSUFBSSxHQUFXLENBQUM7SUFDaEIsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNiLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDL0MsR0FBRyxHQUFHLEdBQUcsUUFBUSxnQkFBZ0IsTUFBTSxVQUFVLENBQUM7SUFDcEQsQ0FBQztTQUFNLENBQUM7UUFDTixHQUFHLEdBQUcsYUFBYTtZQUNqQixDQUFDLENBQUMsQ0FBQyxnRUFBYSx5QkFBeUIsQ0FBQywyQkFBMkIsR0FBQyxDQUFDLENBQUMsT0FBTztZQUMvRSxDQUFDLENBQUMsQ0FBQyxnRUFBYSx5QkFBeUIsQ0FBQyxtQkFBbUIsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzVFLENBQUM7SUFDRCxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixNQUFNLG1CQUFtQixHQUFHLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3BELE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbkQsTUFBTSxNQUFNO0lBQ1YscUJBQXFCO0lBQ3JCLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJO1FBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJO1FBQ2xCLDRCQUE0QjtRQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDO0lBQ3JCLElBQUksTUFBTSxFQUFFLENBQUM7UUFDWCxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUM7SUFDakMsQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0FBQ0gsQ0FBQztBQXpCRCw4QkF5QkMifQ==